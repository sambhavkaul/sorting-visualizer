{"version":3,"sources":["components/algorithms/BubbleSort.js","components/algorithms/SelectionSort.js","components/SortingVisual.jsx","App.js","serviceWorker.js","index.js"],"names":["swap","auxillaryArray","firstIndex","secondIndex","temp","getBubbleSortAnimations","array","animations","slice","N","length","i","j","push","bubbleSort","getSelectionSortAnimations","minIndex","selectionSort","randomIntFromInterval","min","max","Math","floor","random","SortingVisual","state","resetArray","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","barIndex","newHeight","barStyle","height","isColorChange","barOneIndex","barTwoIndex","this","className","onClick","map","value","idx","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d402b1c.chunk.js","sourcesContent":["function getBubbleSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  bubbleSort(auxillaryArray, animations);\n  //   const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  // console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n  array = auxillaryArray;\n  return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n  const N = auxillaryArray.length;\n  for (let i = 0; i < N - 1; i++) {\n    for (let j = 0; j < N - i - 1; j++) {\n      animations.push([j, j + 1]);\n      animations.push([j, j + 1]);\n      if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n        animations.push([j, auxillaryArray[j + 1]]);\n        animations.push([j + 1, auxillaryArray[j]]);\n        swap(auxillaryArray, j, j + 1);\n      } else {\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n      }\n    }\n  }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\n// function arraysAreEqual(firstArray, secondArray) {\n//     if (firstArray.length !== secondArray.length) {\n//         return false;\n//     }\n//     for (let i = 0; i < firstArray.length; i++) {\n//         if (firstArray[i] !== secondArray[i]) {\n//             return false;\n//         }\n//     }\n//     return true;\n// }\n\nexport default getBubbleSortAnimations;\n","function getSelectionSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  selectionSort(auxillaryArray, animations);\n  // const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  // console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n  array = auxillaryArray;\n  return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n  const N = auxillaryArray.length;\n  for (let i = 0; i < N - 1; i++) {\n    let minIndex = i; //Finding minimum element in unsorted array\n    for (let j = i + 1; j < N; j++) {\n      animations.push([\"comparision1\", j, minIndex]);\n      animations.push([\"comparision2\", j, minIndex]);\n      if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n        minIndex = j;\n      }\n    }\n    animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n    animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n    // Swap the found minimum element with the first element\n    swap(auxillaryArray, minIndex, i);\n  }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\n// function arraysAreEqual(firstArray, secondArray) {\n//   if (firstArray.length !== secondArray.length) {\n//       return false;\n//   }\n//   for (let i = 0; i < firstArray.length; i++) {\n//     if (firstArray[i] !== secondArray[i]) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\n\nexport default getSelectionSortAnimations","import React, { Component } from \"react\";\nimport getBubbleSortAnimations from \"./algorithms/BubbleSort\";\nimport getSelectionSortAnimations from \"./algorithms/SelectionSort\";\n\nconst ANIMATION_SPEED = 0.7;\nconst NUMBER_OF_BARS = 180;\n\nclass SortingVisual extends Component {\n  state = {\n    array: []\n  };\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray = () => {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_BARS; i++) {\n      array.push(randomIntFromInterval(5, 800));\n    }\n    this.setState({ array });\n  };\n\n  bubbleSort = () => {\n    const [animations, sortArray] = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? \"red\" : \"cyan\";\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        const [barIndex, newHeight] = animations[i];\n        if (barIndex === -1) {\n          continue;\n        }\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n  };\n\n  selectionSort = () => {\n    const [animations, sortArray] = getSelectionSortAnimations(\n      this.state.array\n    );\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparision1\" ||\n        animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? \"red\" : \"cyan\";\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED);\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED);\n      }\n    }\n  };\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <>\n        <div className=\"nav-bar\">\n          <span>Sorting Visualizer</span>\n          <button className=\"button\" onClick={() => this.resetArray()}>\n            {\" \"}\n            Generate New Array\n          </button>\n          <button className=\"button\" onClick={() => this.bubbleSort()}>\n            {\" \"}\n            Bubble Sort\n          </button>\n          <button className=\"button\" onClick={() => this.selectionSort()}>\n            {\" \"}\n            Selection Sort\n          </button>{\" \"}\n          <button className=\"button\" onClick={() => this.selectionSort()}>\n            {\" \"}\n            Insertion Sort\n          </button>\n          <button className=\"button\" onClick={() => this.selectionSort()}>\n            {\" \"}\n            Merge Sort\n          </button>{\" \"}\n          <button className=\"button\" onClick={() => this.selectionSort()}>\n            {\" \"}\n            Quick Sort\n          </button>{\" \"}\n          <button className=\"button\" onClick={() => this.selectionSort()}>\n            {\" \"}\n            Heap Sort\n          </button>\n        </div>\n\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{ height: `${value}px` }}\n            ></div>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisual;\n","import React from 'react';\nimport SortingVisual from './components/SortingVisual';\nimport './components/SortingVisual.css';\n\nfunction App() {\n  return ( <\n    div className = \"App\" >\n    <\n    SortingVisual / >\n    <\n    /div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}